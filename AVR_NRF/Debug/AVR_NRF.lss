
AVR_NRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000103e  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000865  00000000  00000000  00001466  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006f6  00000000  00000000  00001ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000027c  00000000  00000000  000023c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000583  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007af  00000000  00000000  00002bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003372  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
//#include "spi.h"
#define F_CPU 8000000UL
#include "NRF.h"

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	uint8_t transmit[1]={0xAA};
	uint8_t data=0;
  76:	19 82       	std	Y+1, r1	; 0x01
	DDRA=0xFF;
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	8a bb       	out	0x1a, r24	; 26
	NRF_Init();
  7c:	0e 94 8e 00 	call	0x11c	; 0x11c <NRF_Init>
	NRF_OpenPipe(0,1);
  80:	61 e0       	ldi	r22, 0x01	; 1
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	0e 94 18 01 	call	0x230	; 0x230 <NRF_OpenPipe>
	NRF_PowerOn();
  88:	0e 94 a5 00 	call	0x14a	; 0x14a <NRF_PowerOn>
	NRF_ReceiveMode();
  8c:	0e 94 c6 00 	call	0x18c	; 0x18c <NRF_ReceiveMode>
		/*NRF_TransmitMode();
		NRF_WritePLD(transmit,1);
		NRF_WriteData();*/
		
		/*NRF_ResetRetransmitCounter();*/
		if(NRF_DataAvailable()){
  90:	0e 94 03 01 	call	0x206	; 0x206 <NRF_DataAvailable>
  94:	88 23       	and	r24, r24
  96:	29 f0       	breq	.+10     	; 0xa2 <main+0x36>
			NRF_ReadPLD(&data,1);
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	ce 01       	movw	r24, r28
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <NRF_ReadPLD>
		}
		PORTA=data;
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	8b bb       	out	0x1b, r24	; 27
		
    }
  a6:	f4 cf       	rjmp	.-24     	; 0x90 <main+0x24>

000000a8 <NRF_ReadReg>:
	{
		NRF_ReadReg(STATUS,&status,1);
	}
	NRF_WriteReg(STATUS,&status,1);
	cleBit(PORTB,CE);
}
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	8b 01       	movw	r16, r22
  b4:	f4 2e       	mov	r15, r20
  b6:	c4 98       	cbi	0x18, 4	; 24
  b8:	0e 94 40 01 	call	0x280	; 0x280 <SPI_ReadWriteByte>
  bc:	ff 20       	and	r15, r15
  be:	51 f0       	breq	.+20     	; 0xd4 <NRF_ReadReg+0x2c>
  c0:	e8 01       	movw	r28, r16
  c2:	0f 0d       	add	r16, r15
  c4:	11 1d       	adc	r17, r1
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	0e 94 40 01 	call	0x280	; 0x280 <SPI_ReadWriteByte>
  cc:	89 93       	st	Y+, r24
  ce:	c0 17       	cp	r28, r16
  d0:	d1 07       	cpc	r29, r17
  d2:	c9 f7       	brne	.-14     	; 0xc6 <NRF_ReadReg+0x1e>
  d4:	c4 9a       	sbi	0x18, 4	; 24
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	0f 91       	pop	r16
  de:	ff 90       	pop	r15
  e0:	08 95       	ret

000000e2 <NRF_WriteReg>:
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	8b 01       	movw	r16, r22
  ee:	f4 2e       	mov	r15, r20
  f0:	c4 98       	cbi	0x18, 4	; 24
  f2:	80 62       	ori	r24, 0x20	; 32
  f4:	0e 94 40 01 	call	0x280	; 0x280 <SPI_ReadWriteByte>
  f8:	ff 20       	and	r15, r15
  fa:	49 f0       	breq	.+18     	; 0x10e <NRF_WriteReg+0x2c>
  fc:	e8 01       	movw	r28, r16
  fe:	0f 0d       	add	r16, r15
 100:	11 1d       	adc	r17, r1
 102:	89 91       	ld	r24, Y+
 104:	0e 94 40 01 	call	0x280	; 0x280 <SPI_ReadWriteByte>
 108:	c0 17       	cp	r28, r16
 10a:	d1 07       	cpc	r29, r17
 10c:	d1 f7       	brne	.-12     	; 0x102 <NRF_WriteReg+0x20>
 10e:	c4 9a       	sbi	0x18, 4	; 24
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	ff 90       	pop	r15
 11a:	08 95       	ret

0000011c <NRF_Init>:
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	1f 92       	push	r1
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	89 83       	std	Y+1, r24	; 0x01
 12a:	64 e0       	ldi	r22, 0x04	; 4
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	0e 94 29 01 	call	0x252	; 0x252 <SPI_Init>
 132:	c3 98       	cbi	0x18, 3	; 24
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	be 01       	movw	r22, r28
 138:	6f 5f       	subi	r22, 0xFF	; 255
 13a:	7f 4f       	sbci	r23, 0xFF	; 255
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 71 00 	call	0xe2	; 0xe2 <NRF_WriteReg>
 142:	0f 90       	pop	r0
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <NRF_PowerOn>:
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	1f 92       	push	r1
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	19 82       	std	Y+1, r1	; 0x01
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	be 01       	movw	r22, r28
 15a:	6f 5f       	subi	r22, 0xFF	; 255
 15c:	7f 4f       	sbci	r23, 0xFF	; 255
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 54 00 	call	0xa8	; 0xa8 <NRF_ReadReg>
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	82 60       	ori	r24, 0x02	; 2
 168:	89 83       	std	Y+1, r24	; 0x01
 16a:	41 e0       	ldi	r20, 0x01	; 1
 16c:	be 01       	movw	r22, r28
 16e:	6f 5f       	subi	r22, 0xFF	; 255
 170:	7f 4f       	sbci	r23, 0xFF	; 255
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 71 00 	call	0xe2	; 0xe2 <NRF_WriteReg>
 178:	83 ef       	ldi	r24, 0xF3	; 243
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <NRF_PowerOn+0x32>
 180:	00 c0       	rjmp	.+0      	; 0x182 <NRF_PowerOn+0x38>
 182:	00 00       	nop
 184:	0f 90       	pop	r0
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <NRF_ReceiveMode>:
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	1f 92       	push	r1
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	19 82       	std	Y+1, r1	; 0x01
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	be 01       	movw	r22, r28
 19c:	6f 5f       	subi	r22, 0xFF	; 255
 19e:	7f 4f       	sbci	r23, 0xFF	; 255
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 54 00 	call	0xa8	; 0xa8 <NRF_ReadReg>
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	89 83       	std	Y+1, r24	; 0x01
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	be 01       	movw	r22, r28
 1b0:	6f 5f       	subi	r22, 0xFF	; 255
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 71 00 	call	0xe2	; 0xe2 <NRF_WriteReg>
 1ba:	c3 9a       	sbi	0x18, 3	; 24
 1bc:	8d e2       	ldi	r24, 0x2D	; 45
 1be:	8a 95       	dec	r24
 1c0:	f1 f7       	brne	.-4      	; 0x1be <NRF_ReceiveMode+0x32>
 1c2:	0f 90       	pop	r0
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <NRF_ReadPLD>:
 1ca:	ff 92       	push	r15
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	8c 01       	movw	r16, r24
 1d6:	f6 2e       	mov	r15, r22
 1d8:	c4 98       	cbi	0x18, 4	; 24
 1da:	81 e6       	ldi	r24, 0x61	; 97
 1dc:	0e 94 40 01 	call	0x280	; 0x280 <SPI_ReadWriteByte>
 1e0:	ff 20       	and	r15, r15
 1e2:	51 f0       	breq	.+20     	; 0x1f8 <NRF_ReadPLD+0x2e>
 1e4:	e8 01       	movw	r28, r16
 1e6:	0f 0d       	add	r16, r15
 1e8:	11 1d       	adc	r17, r1
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	0e 94 40 01 	call	0x280	; 0x280 <SPI_ReadWriteByte>
 1f0:	89 93       	st	Y+, r24
 1f2:	c0 17       	cp	r28, r16
 1f4:	d1 07       	cpc	r29, r17
 1f6:	c9 f7       	brne	.-14     	; 0x1ea <NRF_ReadPLD+0x20>
 1f8:	c4 9a       	sbi	0x18, 4	; 24
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	08 95       	ret

00000206 <NRF_DataAvailable>:
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	1f 92       	push	r1
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	19 82       	std	Y+1, r1	; 0x01
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	be 01       	movw	r22, r28
 216:	6f 5f       	subi	r22, 0xFF	; 255
 218:	7f 4f       	sbci	r23, 0xFF	; 255
 21a:	87 e0       	ldi	r24, 0x07	; 7
 21c:	0e 94 54 00 	call	0xa8	; 0xa8 <NRF_ReadReg>
 220:	99 81       	ldd	r25, Y+1	; 0x01
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	96 ff       	sbrs	r25, 6
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0f 90       	pop	r0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <NRF_OpenPipe>:
void NRF_OpenPipe(uint8_t pipe,uint8_t width){
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	1f 92       	push	r1
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
	uint8_t size=width;
 23a:	69 83       	std	Y+1, r22	; 0x01
	NRF_WriteReg(RX_PW_P0+pipe,&size,1);
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	be 01       	movw	r22, r28
 240:	6f 5f       	subi	r22, 0xFF	; 255
 242:	7f 4f       	sbci	r23, 0xFF	; 255
 244:	8f 5e       	subi	r24, 0xEF	; 239
 246:	0e 94 71 00 	call	0xe2	; 0xe2 <NRF_WriteReg>
}
 24a:	0f 90       	pop	r0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <SPI_Init>:
	
}
uint8_t SPI_ReadByte(void){
	while(!(SPSR&(1<<SPIF))){}
		return SPDR;
}
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	a9 01       	movw	r20, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <SPI_Init+0xc>
 25a:	44 0f       	add	r20, r20
 25c:	55 1f       	adc	r21, r21
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <SPI_Init+0x8>
 262:	94 2f       	mov	r25, r20
 264:	90 6a       	ori	r25, 0xA0	; 160
 266:	02 c0       	rjmp	.+4      	; 0x26c <SPI_Init+0x1a>
 268:	22 0f       	add	r18, r18
 26a:	33 1f       	adc	r19, r19
 26c:	8a 95       	dec	r24
 26e:	e2 f7       	brpl	.-8      	; 0x268 <SPI_Init+0x16>
 270:	29 2b       	or	r18, r25
 272:	27 bb       	out	0x17, r18	; 23
 274:	88 b3       	in	r24, 0x18	; 24
 276:	48 2b       	or	r20, r24
 278:	48 bb       	out	0x18, r20	; 24
 27a:	83 e5       	ldi	r24, 0x53	; 83
 27c:	8d b9       	out	0x0d, r24	; 13
 27e:	08 95       	ret

00000280 <SPI_ReadWriteByte>:
uint8_t SPI_ReadWriteByte(uint8_t data){
	//uint8_t empty=0;
	SPDR=data;
 280:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF))){}
 282:	77 9b       	sbis	0x0e, 7	; 14
 284:	fe cf       	rjmp	.-4      	; 0x282 <SPI_ReadWriteByte+0x2>
	return SPDR;	
 286:	8f b1       	in	r24, 0x0f	; 15
 288:	08 95       	ret

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
