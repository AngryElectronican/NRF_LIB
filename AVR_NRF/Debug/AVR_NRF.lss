
AVR_NRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000522  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000522  000005b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800066  00800066  000005bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000182f  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b25  00000000  00000000  00001fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a96  00000000  00000000  00002adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  00003574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000663  00000000  00000000  00003954  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af1  00000000  00000000  00003fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004aa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  8a:	0c 94 8f 02 	jmp	0x51e	; 0x51e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_setPinDirection>:
uint8_t GPIO_readPort(volatile uint8_t *port){
	return *(port-2);
}

void GPIO_setPinDirection(volatile uint8_t *port,uint8_t pin,DIR value){
	if(value==OUT){
  92:	41 30       	cpi	r20, 0x01	; 1
  94:	69 f4       	brne	.+26     	; 0xb0 <GPIO_setPinDirection+0x1e>
		*(port-1)|=(1<<pin);
  96:	e8 2f       	mov	r30, r24
  98:	f9 2f       	mov	r31, r25
  9a:	22 91       	ld	r18, -Z
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_setPinDirection+0x14>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_setPinDirection+0x10>
  aa:	82 2b       	or	r24, r18
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret
	} else {
		*(port-1)&=~(1<<pin);
  b0:	e8 2f       	mov	r30, r24
  b2:	f9 2f       	mov	r31, r25
  b4:	22 91       	ld	r18, -Z
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <GPIO_setPinDirection+0x2e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <GPIO_setPinDirection+0x2a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <GPIO_writePin>:
	}
}
void GPIO_writePin(volatile uint8_t *port,uint8_t pin,bool value){
  cc:	fc 01       	movw	r30, r24
	if(value==TRUE){
  ce:	41 30       	cpi	r20, 0x01	; 1
  d0:	59 f4       	brne	.+22     	; 0xe8 <GPIO_writePin+0x1c>
		*(port)|=(1<<pin);
  d2:	20 81       	ld	r18, Z
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <GPIO_writePin+0x12>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <GPIO_writePin+0xe>
  e2:	82 2b       	or	r24, r18
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret
	}else{
		*(port)&=~(1<<pin);
  e8:	90 81       	ld	r25, Z
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <GPIO_writePin+0x28>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <GPIO_writePin+0x24>
  f8:	20 95       	com	r18
  fa:	29 23       	and	r18, r25
  fc:	20 83       	st	Z, r18
  fe:	08 95       	ret

00000100 <__vector_1>:
#include <avr/sleep.h>
#define F_CPU 8000000UL
#include "NRF.h"
#include "gpio.h"
uint8_t buf=0;
ISR(INT0_vect){
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31

	while(NRF_DataAvailable()){
 122:	0a c0       	rjmp	.+20     	; 0x138 <__vector_1+0x38>
		NRF_ReadPLD(&buf,1);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	86 e6       	ldi	r24, 0x66	; 102
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <NRF_ReadPLD>
		NRF_StatusClear();
 12e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <NRF_StatusClear>
		PORTA=buf;
 132:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 136:	8b bb       	out	0x1b, r24	; 27
#include "NRF.h"
#include "gpio.h"
uint8_t buf=0;
ISR(INT0_vect){

	while(NRF_DataAvailable()){
 138:	0e 94 0f 02 	call	0x41e	; 0x41e <NRF_DataAvailable>
 13c:	81 11       	cpse	r24, r1
 13e:	f2 cf       	rjmp	.-28     	; 0x124 <__vector_1+0x24>
		NRF_ReadPLD(&buf,1);
		NRF_StatusClear();
		PORTA=buf;
	}
	PORTD^=(1<<PD5);
 140:	92 b3       	in	r25, 0x12	; 18
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	89 27       	eor	r24, r25
 146:	82 bb       	out	0x12, r24	; 18
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <main>:

int main(void)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	2a 97       	sbiw	r28, 0x0a	; 10
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	f8 94       	cli
 178:	de bf       	out	0x3e, r29	; 62
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	cd bf       	out	0x3d, r28	; 61
	
	//uint8_t data=0;
	uint8_t pipe0[]={33,33,33,33,33};
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	e0 e6       	ldi	r30, 0x60	; 96
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	de 01       	movw	r26, r28
 186:	11 96       	adiw	r26, 0x01	; 1
 188:	01 90       	ld	r0, Z+
 18a:	0d 92       	st	X+, r0
 18c:	8a 95       	dec	r24
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x1e>
	uint8_t pipe1[]={66,33,33,33,33};
	uint8_t TX1[]={66,33,33,33,33};
	uint8_t TX0[]={33,33,33,33,33};
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	e0 e6       	ldi	r30, 0x60	; 96
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	de 01       	movw	r26, r28
 198:	16 96       	adiw	r26, 0x06	; 6
 19a:	01 90       	ld	r0, Z+
 19c:	0d 92       	st	X+, r0
 19e:	8a 95       	dec	r24
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x30>
	DDRA=0xFF;
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	8a bb       	out	0x1a, r24	; 26
	DDRD=0xFF;
 1a6:	81 bb       	out	0x11, r24	; 17
	
	DDRD&=~(1<<PD2);
 1a8:	8a 98       	cbi	0x11, 2	; 17
	DDRB|=1<<PB0;
 1aa:	b8 9a       	sbi	0x17, 0	; 23
	PORTB&=~(1<<PB0);
 1ac:	c0 98       	cbi	0x18, 0	; 24
	PORTB|=(1<<PB0);
 1ae:	c0 9a       	sbi	0x18, 0	; 24
	
	PORTD|=1<<PD2;
 1b0:	92 9a       	sbi	0x12, 2	; 18
	//cleBit(MCUCSR,ISC2);
	//MCUCSR&=~(1<<ISC2);
	//setBit(GICR,INT2);
	GICR|=1<<INT0;
 1b2:	8b b7       	in	r24, 0x3b	; 59
 1b4:	80 64       	ori	r24, 0x40	; 64
 1b6:	8b bf       	out	0x3b, r24	; 59
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	8f ec       	ldi	r24, 0xCF	; 207
 1ba:	97 e0       	ldi	r25, 0x07	; 7
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x52>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x58>
 1c2:	00 00       	nop
	//MCUCR|=(1<<SE);//|(1<<SM1);
	_delay_ms(1);
	sei();
 1c4:	78 94       	sei
	
	
	NRF_Init();
 1c6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <NRF_Init>
	
	NRF_PowerOff();
 1ca:	0e 94 90 01 	call	0x320	; 0x320 <NRF_PowerOff>
	
	NRF_FlashRx();
 1ce:	0e 94 63 01 	call	0x2c6	; 0x2c6 <NRF_FlashRx>
	NRF_FlashTx();	
 1d2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <NRF_FlashTx>
	NRF_SetPipeAddress(0,pipe0,5);
 1d6:	45 e0       	ldi	r20, 0x05	; 5
 1d8:	be 01       	movw	r22, r28
 1da:	6f 5f       	subi	r22, 0xFF	; 255
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <NRF_SetPipeAddress>
	NRF_SetTransmitAddress(TX0,5);
 1e4:	65 e0       	ldi	r22, 0x05	; 5
 1e6:	ce 01       	movw	r24, r28
 1e8:	06 96       	adiw	r24, 0x06	; 6
 1ea:	0e 94 5d 02 	call	0x4ba	; 0x4ba <NRF_SetTransmitAddress>
	NRF_OpenPipe(0,1);
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 2b 02 	call	0x456	; 0x456 <NRF_OpenPipe>
	NRF_PowerOn();
 1f6:	0e 94 b1 01 	call	0x362	; 0x362 <NRF_PowerOn>
	NRF_ReceiveMode();
 1fa:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <NRF_ReceiveMode>
	
	NRF_ReadReg(STATUS,&buf,1);
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	66 e6       	ldi	r22, 0x66	; 102
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	87 e0       	ldi	r24, 0x07	; 7
 206:	0e 94 23 01 	call	0x246	; 0x246 <NRF_ReadReg>
	NRF_WriteReg(STATUS,&buf,1);
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	66 e6       	ldi	r22, 0x66	; 102
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	87 e0       	ldi	r24, 0x07	; 7
 212:	0e 94 40 01 	call	0x280	; 0x280 <NRF_WriteReg>
		//NRF_TransmitMode();
		//NRF_WritePLD(&buf,1);
		//NRF_WriteData();
		//NRF_ReadReg(STATUS,&buf,1);
		//NRF_ReceiveMode();
		PORTA=0xFF;
 216:	9f ef       	ldi	r25, 0xFF	; 255
 218:	9b bb       	out	0x1b, r25	; 27
		sleep_enable();
 21a:	85 b7       	in	r24, 0x35	; 53
 21c:	80 64       	ori	r24, 0x40	; 64
 21e:	85 bf       	out	0x35, r24	; 53
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 220:	85 b7       	in	r24, 0x35	; 53
 222:	8f 74       	andi	r24, 0x4F	; 79
 224:	80 62       	ori	r24, 0x20	; 32
 226:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
 228:	88 95       	sleep
		sleep_disable();
 22a:	85 b7       	in	r24, 0x35	; 53
 22c:	8f 7b       	andi	r24, 0xBF	; 191
 22e:	85 bf       	out	0x35, r24	; 53
		//MCUCR|=(1<<SE);
		//asm("SLEEP");
		//MCUCR&=~(1<<SE);
		PORTA=0x00;
 230:	1b ba       	out	0x1b, r1	; 27
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	30 e7       	ldi	r19, 0x70	; 112
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	30 40       	sbci	r19, 0x00	; 0
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0xce>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0xd8>
 242:	00 00       	nop
 244:	e9 cf       	rjmp	.-46     	; 0x218 <main+0xae>

00000246 <NRF_ReadReg>:
  NRF_WriteReg(EN_RXADDR,&size,1);
}
void NRF_SetPipeAddress(uint8_t pipe,uint8_t *addr,uint8_t num){
	NRF_WriteReg(RX_ADDR_P0+pipe,addr,num);
}
void NRF_EnAutoAck(uint8_t pipe){
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	8b 01       	movw	r16, r22
 252:	f4 2e       	mov	r15, r20
 254:	c4 98       	cbi	0x18, 4	; 24
 256:	0e 94 8a 02 	call	0x514	; 0x514 <SPI_ReadWriteByte>
 25a:	ff 20       	and	r15, r15
 25c:	51 f0       	breq	.+20     	; 0x272 <NRF_ReadReg+0x2c>
 25e:	e8 01       	movw	r28, r16
 260:	0f 0d       	add	r16, r15
 262:	11 1d       	adc	r17, r1
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	0e 94 8a 02 	call	0x514	; 0x514 <SPI_ReadWriteByte>
 26a:	89 93       	st	Y+, r24
 26c:	c0 17       	cp	r28, r16
 26e:	d1 07       	cpc	r29, r17
 270:	c9 f7       	brne	.-14     	; 0x264 <NRF_ReadReg+0x1e>
 272:	c4 9a       	sbi	0x18, 4	; 24
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	08 95       	ret

00000280 <NRF_WriteReg>:
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	8b 01       	movw	r16, r22
 28c:	f4 2e       	mov	r15, r20
 28e:	c4 98       	cbi	0x18, 4	; 24
 290:	80 62       	ori	r24, 0x20	; 32
 292:	0e 94 8a 02 	call	0x514	; 0x514 <SPI_ReadWriteByte>
 296:	ff 20       	and	r15, r15
 298:	49 f0       	breq	.+18     	; 0x2ac <NRF_WriteReg+0x2c>
 29a:	e8 01       	movw	r28, r16
 29c:	0f 0d       	add	r16, r15
 29e:	11 1d       	adc	r17, r1
 2a0:	89 91       	ld	r24, Y+
 2a2:	0e 94 8a 02 	call	0x514	; 0x514 <SPI_ReadWriteByte>
 2a6:	c0 17       	cp	r28, r16
 2a8:	d1 07       	cpc	r29, r17
 2aa:	d1 f7       	brne	.-12     	; 0x2a0 <NRF_WriteReg+0x20>
 2ac:	c4 9a       	sbi	0x18, 4	; 24
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	08 95       	ret

000002ba <NRF_FlashTx>:
 2ba:	c4 98       	cbi	0x18, 4	; 24
 2bc:	81 ee       	ldi	r24, 0xE1	; 225
 2be:	0e 94 8a 02 	call	0x514	; 0x514 <SPI_ReadWriteByte>
 2c2:	c4 9a       	sbi	0x18, 4	; 24
 2c4:	08 95       	ret

000002c6 <NRF_FlashRx>:
 2c6:	c4 98       	cbi	0x18, 4	; 24
 2c8:	82 ee       	ldi	r24, 0xE2	; 226
 2ca:	0e 94 8a 02 	call	0x514	; 0x514 <SPI_ReadWriteByte>
 2ce:	c4 9a       	sbi	0x18, 4	; 24
 2d0:	08 95       	ret

000002d2 <NRF_StatusClear>:
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	1f 92       	push	r1
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	80 e4       	ldi	r24, 0x40	; 64
 2de:	89 83       	std	Y+1, r24	; 0x01
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	be 01       	movw	r22, r28
 2e4:	6f 5f       	subi	r22, 0xFF	; 255
 2e6:	7f 4f       	sbci	r23, 0xFF	; 255
 2e8:	87 e0       	ldi	r24, 0x07	; 7
 2ea:	0e 94 40 01 	call	0x280	; 0x280 <NRF_WriteReg>
 2ee:	0f 90       	pop	r0
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <NRF_Init>:
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	1f 92       	push	r1
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	88 e3       	ldi	r24, 0x38	; 56
 302:	89 83       	std	Y+1, r24	; 0x01
 304:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_Init>
 308:	c3 98       	cbi	0x18, 3	; 24
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	be 01       	movw	r22, r28
 30e:	6f 5f       	subi	r22, 0xFF	; 255
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 40 01 	call	0x280	; 0x280 <NRF_WriteReg>
 318:	0f 90       	pop	r0
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <NRF_PowerOff>:
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	1f 92       	push	r1
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	19 82       	std	Y+1, r1	; 0x01
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	be 01       	movw	r22, r28
 330:	6f 5f       	subi	r22, 0xFF	; 255
 332:	7f 4f       	sbci	r23, 0xFF	; 255
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 23 01 	call	0x246	; 0x246 <NRF_ReadReg>
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	8d 7f       	andi	r24, 0xFD	; 253
 33e:	89 83       	std	Y+1, r24	; 0x01
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	be 01       	movw	r22, r28
 344:	6f 5f       	subi	r22, 0xFF	; 255
 346:	7f 4f       	sbci	r23, 0xFF	; 255
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 40 01 	call	0x280	; 0x280 <NRF_WriteReg>
 34e:	83 ef       	ldi	r24, 0xF3	; 243
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <NRF_PowerOff+0x32>
 356:	00 c0       	rjmp	.+0      	; 0x358 <NRF_PowerOff+0x38>
 358:	00 00       	nop
 35a:	0f 90       	pop	r0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <NRF_PowerOn>:
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	1f 92       	push	r1
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	19 82       	std	Y+1, r1	; 0x01
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	be 01       	movw	r22, r28
 372:	6f 5f       	subi	r22, 0xFF	; 255
 374:	7f 4f       	sbci	r23, 0xFF	; 255
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 23 01 	call	0x246	; 0x246 <NRF_ReadReg>
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	89 83       	std	Y+1, r24	; 0x01
 382:	41 e0       	ldi	r20, 0x01	; 1
 384:	be 01       	movw	r22, r28
 386:	6f 5f       	subi	r22, 0xFF	; 255
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 40 01 	call	0x280	; 0x280 <NRF_WriteReg>
 390:	83 ef       	ldi	r24, 0xF3	; 243
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <NRF_PowerOn+0x32>
 398:	00 c0       	rjmp	.+0      	; 0x39a <NRF_PowerOn+0x38>
 39a:	00 00       	nop
 39c:	0f 90       	pop	r0
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <NRF_ReceiveMode>:
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	1f 92       	push	r1
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	19 82       	std	Y+1, r1	; 0x01
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	be 01       	movw	r22, r28
 3b4:	6f 5f       	subi	r22, 0xFF	; 255
 3b6:	7f 4f       	sbci	r23, 0xFF	; 255
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 23 01 	call	0x246	; 0x246 <NRF_ReadReg>
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	81 60       	ori	r24, 0x01	; 1
 3c2:	89 83       	std	Y+1, r24	; 0x01
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	be 01       	movw	r22, r28
 3c8:	6f 5f       	subi	r22, 0xFF	; 255
 3ca:	7f 4f       	sbci	r23, 0xFF	; 255
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 40 01 	call	0x280	; 0x280 <NRF_WriteReg>
 3d2:	c3 9a       	sbi	0x18, 3	; 24
 3d4:	8d e2       	ldi	r24, 0x2D	; 45
 3d6:	8a 95       	dec	r24
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <NRF_ReceiveMode+0x32>
 3da:	0f 90       	pop	r0
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <NRF_ReadPLD>:
 3e2:	ff 92       	push	r15
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	8c 01       	movw	r16, r24
 3ee:	f6 2e       	mov	r15, r22
 3f0:	c4 98       	cbi	0x18, 4	; 24
 3f2:	81 e6       	ldi	r24, 0x61	; 97
 3f4:	0e 94 8a 02 	call	0x514	; 0x514 <SPI_ReadWriteByte>
 3f8:	ff 20       	and	r15, r15
 3fa:	51 f0       	breq	.+20     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3fc:	e8 01       	movw	r28, r16
 3fe:	0f 0d       	add	r16, r15
 400:	11 1d       	adc	r17, r1
 402:	8f ef       	ldi	r24, 0xFF	; 255
 404:	0e 94 8a 02 	call	0x514	; 0x514 <SPI_ReadWriteByte>
 408:	89 93       	st	Y+, r24
 40a:	c0 17       	cp	r28, r16
 40c:	d1 07       	cpc	r29, r17
 40e:	c9 f7       	brne	.-14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 410:	c4 9a       	sbi	0x18, 4	; 24
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	08 95       	ret

0000041e <NRF_DataAvailable>:
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	1f 92       	push	r1
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	19 82       	std	Y+1, r1	; 0x01
 42a:	41 e0       	ldi	r20, 0x01	; 1
 42c:	be 01       	movw	r22, r28
 42e:	6f 5f       	subi	r22, 0xFF	; 255
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	87 e0       	ldi	r24, 0x07	; 7
 434:	0e 94 23 01 	call	0x246	; 0x246 <NRF_ReadReg>
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	28 2f       	mov	r18, r24
 43c:	26 95       	lsr	r18
 43e:	27 70       	andi	r18, 0x07	; 7
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	26 30       	cpi	r18, 0x06	; 6
 444:	31 05       	cpc	r19, r1
 446:	14 f0       	brlt	.+4      	; 0x44c <NRF_DataAvailable+0x2e>
 448:	81 70       	andi	r24, 0x01	; 1
 44a:	01 c0       	rjmp	.+2      	; 0x44e <NRF_DataAvailable+0x30>
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0f 90       	pop	r0
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <NRF_OpenPipe>:
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	1f 92       	push	r1
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
 462:	18 2f       	mov	r17, r24
 464:	69 83       	std	Y+1, r22	; 0x01
 466:	41 e0       	ldi	r20, 0x01	; 1
 468:	be 01       	movw	r22, r28
 46a:	6f 5f       	subi	r22, 0xFF	; 255
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	81 e1       	ldi	r24, 0x11	; 17
 470:	81 0f       	add	r24, r17
 472:	0e 94 40 01 	call	0x280	; 0x280 <NRF_WriteReg>
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	be 01       	movw	r22, r28
 47a:	6f 5f       	subi	r22, 0xFF	; 255
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	0e 94 23 01 	call	0x246	; 0x246 <NRF_ReadReg>
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	c9 01       	movw	r24, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__stack+0x31>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	1a 95       	dec	r17
 492:	e2 f7       	brpl	.-8      	; 0x48c <__stack+0x2d>
 494:	99 81       	ldd	r25, Y+1	; 0x01
 496:	89 2b       	or	r24, r25
 498:	89 83       	std	Y+1, r24	; 0x01
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	be 01       	movw	r22, r28
 49e:	6f 5f       	subi	r22, 0xFF	; 255
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	0e 94 40 01 	call	0x280	; 0x280 <NRF_WriteReg>
 4a8:	0f 90       	pop	r0
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	1f 91       	pop	r17
 4b0:	08 95       	ret

000004b2 <NRF_SetPipeAddress>:
 4b2:	86 5f       	subi	r24, 0xF6	; 246
 4b4:	0e 94 40 01 	call	0x280	; 0x280 <NRF_WriteReg>
 4b8:	08 95       	ret

000004ba <NRF_SetTransmitAddress>:
	
}
void NRF_SetTransmitAddress(uint8_t *addr,uint8_t num){
 4ba:	46 2f       	mov	r20, r22
	NRF_WriteReg(TX_ADDR,addr,num);
 4bc:	bc 01       	movw	r22, r24
 4be:	80 e1       	ldi	r24, 0x10	; 16
 4c0:	0e 94 40 01 	call	0x280	; 0x280 <NRF_WriteReg>
 4c4:	08 95       	ret

000004c6 <SPI_Init>:
	
}
uint8_t SPI_ReadByte(void){
	while(!(SPSR&(1<<SPIF))){}
		return SPDR;
}
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	63 e0       	ldi	r22, 0x03	; 3
 4ca:	88 e3       	ldi	r24, 0x38	; 56
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setPinDirection>
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	64 e0       	ldi	r22, 0x04	; 4
 4d6:	88 e3       	ldi	r24, 0x38	; 56
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setPinDirection>
 4de:	41 e0       	ldi	r20, 0x01	; 1
 4e0:	65 e0       	ldi	r22, 0x05	; 5
 4e2:	88 e3       	ldi	r24, 0x38	; 56
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setPinDirection>
 4ea:	40 e0       	ldi	r20, 0x00	; 0
 4ec:	66 e0       	ldi	r22, 0x06	; 6
 4ee:	88 e3       	ldi	r24, 0x38	; 56
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setPinDirection>
 4f6:	41 e0       	ldi	r20, 0x01	; 1
 4f8:	67 e0       	ldi	r22, 0x07	; 7
 4fa:	88 e3       	ldi	r24, 0x38	; 56
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setPinDirection>
 502:	41 e0       	ldi	r20, 0x01	; 1
 504:	64 e0       	ldi	r22, 0x04	; 4
 506:	88 e3       	ldi	r24, 0x38	; 56
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_writePin>
 50e:	83 e5       	ldi	r24, 0x53	; 83
 510:	8d b9       	out	0x0d, r24	; 13
 512:	08 95       	ret

00000514 <SPI_ReadWriteByte>:
uint8_t SPI_ReadWriteByte(uint8_t data){
	//uint8_t empty=0;
	SPDR=data;
 514:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF))){}
 516:	77 9b       	sbis	0x0e, 7	; 14
 518:	fe cf       	rjmp	.-4      	; 0x516 <SPI_ReadWriteByte+0x2>
	return SPDR;	
 51a:	8f b1       	in	r24, 0x0f	; 15
 51c:	08 95       	ret

0000051e <_exit>:
 51e:	f8 94       	cli

00000520 <__stop_program>:
 520:	ff cf       	rjmp	.-2      	; 0x520 <__stop_program>
