
AVR_NRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009c8  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cd  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042a  00000000  00000000  0000145d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e5  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000326  00000000  00000000  00001d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000209b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
//#include "spi.h"
#include "NRF.h"


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	1f 92       	push	r1
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
	uint8_t transmitAddress[5]={0xFF,0xFF,0xFF,0xFF,0xFF};
	uint8_t returnedAddress[5]={0,0,0,0,0};
  7a:	8e 01       	movw	r16, r28
  7c:	0f 5f       	subi	r16, 0xFF	; 255
  7e:	1f 4f       	sbci	r17, 0xFF	; 255
  80:	85 e0       	ldi	r24, 0x05	; 5
  82:	f8 01       	movw	r30, r16
  84:	11 92       	st	Z+, r1
  86:	8a 95       	dec	r24
  88:	e9 f7       	brne	.-6      	; 0x84 <main+0x18>
	//uint8_t data=0;
	DDRA=0xFF;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8a bb       	out	0x1a, r24	; 26
	NRF_Init();
  8e:	0e 94 8f 00 	call	0x11e	; 0x11e <NRF_Init>
	readRegNRF(CONFIG,returnedAddress,1);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	b8 01       	movw	r22, r16
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 51 00 	call	0xa2	; 0xa2 <readRegNRF>
	PORTA=returnedAddress[0];
  9c:	89 81       	ldd	r24, Y+1	; 0x01
  9e:	8b bb       	out	0x1b, r24	; 27
	
    while (1) 
    {
		
    }
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x34>

000000a2 <readRegNRF>:
 */ 
#include "NRF.h"
#include "spi.h"


void readRegNRF(uint8_t addr,uint8_t *buffer,uint8_t size){
  a2:	ff 92       	push	r15
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	8b 01       	movw	r16, r22
  ae:	f4 2e       	mov	r15, r20
	cleBit(PORTB,CSN);
  b0:	c4 98       	cbi	0x18, 4	; 24
	SPI_ReadWriteByte(addr);
  b2:	0e 94 bd 00 	call	0x17a	; 0x17a <SPI_ReadWriteByte>
	for(int i=0;i<size;i++){
  b6:	ff 20       	and	r15, r15
  b8:	51 f0       	breq	.+20     	; 0xce <readRegNRF+0x2c>
  ba:	e8 01       	movw	r28, r16
  bc:	0f 0d       	add	r16, r15
  be:	11 1d       	adc	r17, r1
	buffer[i]=SPI_ReadWriteByte(0xFF);
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	0e 94 bd 00 	call	0x17a	; 0x17a <SPI_ReadWriteByte>
  c6:	89 93       	st	Y+, r24


void readRegNRF(uint8_t addr,uint8_t *buffer,uint8_t size){
	cleBit(PORTB,CSN);
	SPI_ReadWriteByte(addr);
	for(int i=0;i<size;i++){
  c8:	c0 17       	cp	r28, r16
  ca:	d1 07       	cpc	r29, r17
  cc:	c9 f7       	brne	.-14     	; 0xc0 <readRegNRF+0x1e>
	buffer[i]=SPI_ReadWriteByte(0xFF);
	}
	setBit(PORTB,CSN);
  ce:	c4 9a       	sbi	0x18, 4	; 24
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	1f 91       	pop	r17
  d6:	0f 91       	pop	r16
  d8:	ff 90       	pop	r15
  da:	08 95       	ret

000000dc <writeRegNRF>:
uint8_t writeRegNRF(uint8_t addr,uint8_t *value,uint8_t num){
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	8b 01       	movw	r16, r22
  ea:	f4 2e       	mov	r15, r20
	uint8_t receive=0;
	cleBit(PORTB,CSN);
  ec:	c4 98       	cbi	0x18, 4	; 24
	receive=SPI_ReadWriteByte(addr|0x20);
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	0e 94 bd 00 	call	0x17a	; 0x17a <SPI_ReadWriteByte>
  f4:	e8 2e       	mov	r14, r24
	for(int i=0;i<num;i++){
  f6:	ff 20       	and	r15, r15
  f8:	49 f0       	breq	.+18     	; 0x10c <writeRegNRF+0x30>
  fa:	e8 01       	movw	r28, r16
  fc:	0f 0d       	add	r16, r15
  fe:	11 1d       	adc	r17, r1
		SPI_ReadWriteByte(value[i]);
 100:	89 91       	ld	r24, Y+
 102:	0e 94 bd 00 	call	0x17a	; 0x17a <SPI_ReadWriteByte>
}
uint8_t writeRegNRF(uint8_t addr,uint8_t *value,uint8_t num){
	uint8_t receive=0;
	cleBit(PORTB,CSN);
	receive=SPI_ReadWriteByte(addr|0x20);
	for(int i=0;i<num;i++){
 106:	c0 17       	cp	r28, r16
 108:	d1 07       	cpc	r29, r17
 10a:	d1 f7       	brne	.-12     	; 0x100 <writeRegNRF+0x24>
		SPI_ReadWriteByte(value[i]);
	}
	setBit(PORTB,CSN);
 10c:	c4 9a       	sbi	0x18, 4	; 24
	return receive;	
}
 10e:	8e 2d       	mov	r24, r14
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	ff 90       	pop	r15
 11a:	ef 90       	pop	r14
 11c:	08 95       	ret

0000011e <NRF_Init>:
void NRF_Init(void){
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	1f 92       	push	r1
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
	uint8_t startup[]={0x0A};
 128:	8a e0       	ldi	r24, 0x0A	; 10
 12a:	89 83       	std	Y+1, r24	; 0x01
	SPI_Init(CE,CSN);
 12c:	64 e0       	ldi	r22, 0x04	; 4
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	0e 94 a6 00 	call	0x14c	; 0x14c <SPI_Init>
	cleBit(PORTB,CE);
 134:	c3 98       	cbi	0x18, 3	; 24
	writeRegNRF(CONFIG,startup,1);
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	be 01       	movw	r22, r28
 13a:	6f 5f       	subi	r22, 0xFF	; 255
 13c:	7f 4f       	sbci	r23, 0xFF	; 255
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 6e 00 	call	0xdc	; 0xdc <writeRegNRF>
 144:	0f 90       	pop	r0
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <SPI_Init>:
	
}
uint8_t SPI_ReadByte(void){
	while(!(SPSR&(1<<SPIF))){}
		return SPDR;
}
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	a9 01       	movw	r20, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <SPI_Init+0xc>
 154:	44 0f       	add	r20, r20
 156:	55 1f       	adc	r21, r21
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <SPI_Init+0x8>
 15c:	94 2f       	mov	r25, r20
 15e:	90 6a       	ori	r25, 0xA0	; 160
 160:	02 c0       	rjmp	.+4      	; 0x166 <SPI_Init+0x1a>
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	8a 95       	dec	r24
 168:	e2 f7       	brpl	.-8      	; 0x162 <SPI_Init+0x16>
 16a:	29 2b       	or	r18, r25
 16c:	27 bb       	out	0x17, r18	; 23
 16e:	88 b3       	in	r24, 0x18	; 24
 170:	48 2b       	or	r20, r24
 172:	48 bb       	out	0x18, r20	; 24
 174:	83 e5       	ldi	r24, 0x53	; 83
 176:	8d b9       	out	0x0d, r24	; 13
 178:	08 95       	ret

0000017a <SPI_ReadWriteByte>:
uint8_t SPI_ReadWriteByte(uint8_t data){
	//uint8_t empty=0;
	SPDR=data;
 17a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF))){}
 17c:	77 9b       	sbis	0x0e, 7	; 14
 17e:	fe cf       	rjmp	.-4      	; 0x17c <SPI_ReadWriteByte+0x2>
	return SPDR;	
 180:	8f b1       	in	r24, 0x0f	; 15
 182:	08 95       	ret

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
