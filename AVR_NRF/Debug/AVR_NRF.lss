
AVR_NRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fb2  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000879  00000000  00000000  000013ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000065a  00000000  00000000  00001c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  000022c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052f  00000000  00000000  000024b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005fa  00000000  00000000  000029e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002fdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "NRF.h"
#include <util/delay.h>


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	uint8_t transmit[1]={0xAA};
  76:	8a ea       	ldi	r24, 0xAA	; 170
  78:	89 83       	std	Y+1, r24	; 0x01
	uint8_t data=0;
  7a:	1a 82       	std	Y+2, r1	; 0x02
	DDRA=0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	NRF_Init();
  80:	0e 94 95 00 	call	0x12a	; 0x12a <NRF_Init>
	NRF_OpenPipe(0,1);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 33 01 	call	0x266	; 0x266 <NRF_OpenPipe>
	NRF_PowerOn();
  8c:	0e 94 ac 00 	call	0x158	; 0x158 <NRF_PowerOn>
	NRF_TransmitMode();
  90:	0e 94 cd 00 	call	0x19a	; 0x19a <NRF_TransmitMode>
	NRF_WritePLD(transmit,1);
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	ce 01       	movw	r24, r28
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <NRF_WritePLD>
	NRF_WriteData();
  9e:	0e 94 09 01 	call	0x212	; 0x212 <NRF_WriteData>
	NRF_ReadReg(STATUS,&data,1);
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	be 01       	movw	r22, r28
  a6:	6e 5f       	subi	r22, 0xFE	; 254
  a8:	7f 4f       	sbci	r23, 0xFF	; 255
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	0e 94 5b 00 	call	0xb6	; 0xb6 <NRF_ReadReg>
	PORTA=data;
  b0:	8a 81       	ldd	r24, Y+2	; 0x02
  b2:	8b bb       	out	0x1b, r24	; 27
		//NRF_WritePLD(transmit,1);
		//NRF_WriteData();
		//NRF_ReceiveMode();
		
		
    }
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x48>

000000b6 <NRF_ReadReg>:
	NRF_ReadReg(CONFIG,&value,1);
	value|=(1<<PRIM_RX);
	NRF_WriteReg(CONFIG,&value,1);
	setBit(PORTB,CE);
	_delay_us(135);
}
  b6:	ff 92       	push	r15
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	8b 01       	movw	r16, r22
  c2:	f4 2e       	mov	r15, r20
  c4:	c4 98       	cbi	0x18, 4	; 24
  c6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <SPI_ReadWriteByte>
  ca:	ff 20       	and	r15, r15
  cc:	51 f0       	breq	.+20     	; 0xe2 <NRF_ReadReg+0x2c>
  ce:	e8 01       	movw	r28, r16
  d0:	0f 0d       	add	r16, r15
  d2:	11 1d       	adc	r17, r1
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <SPI_ReadWriteByte>
  da:	89 93       	st	Y+, r24
  dc:	c0 17       	cp	r28, r16
  de:	d1 07       	cpc	r29, r17
  e0:	c9 f7       	brne	.-14     	; 0xd4 <NRF_ReadReg+0x1e>
  e2:	c4 9a       	sbi	0x18, 4	; 24
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	ff 90       	pop	r15
  ee:	08 95       	ret

000000f0 <NRF_WriteReg>:
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	8b 01       	movw	r16, r22
  fc:	f4 2e       	mov	r15, r20
  fe:	c4 98       	cbi	0x18, 4	; 24
 100:	80 62       	ori	r24, 0x20	; 32
 102:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <SPI_ReadWriteByte>
 106:	ff 20       	and	r15, r15
 108:	49 f0       	breq	.+18     	; 0x11c <NRF_WriteReg+0x2c>
 10a:	e8 01       	movw	r28, r16
 10c:	0f 0d       	add	r16, r15
 10e:	11 1d       	adc	r17, r1
 110:	89 91       	ld	r24, Y+
 112:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <SPI_ReadWriteByte>
 116:	c0 17       	cp	r28, r16
 118:	d1 07       	cpc	r29, r17
 11a:	d1 f7       	brne	.-12     	; 0x110 <NRF_WriteReg+0x20>
 11c:	c4 9a       	sbi	0x18, 4	; 24
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	08 95       	ret

0000012a <NRF_Init>:
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	1f 92       	push	r1
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	89 83       	std	Y+1, r24	; 0x01
 138:	64 e0       	ldi	r22, 0x04	; 4
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	0e 94 44 01 	call	0x288	; 0x288 <SPI_Init>
 140:	c3 98       	cbi	0x18, 3	; 24
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	be 01       	movw	r22, r28
 146:	6f 5f       	subi	r22, 0xFF	; 255
 148:	7f 4f       	sbci	r23, 0xFF	; 255
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 78 00 	call	0xf0	; 0xf0 <NRF_WriteReg>
 150:	0f 90       	pop	r0
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <NRF_PowerOn>:
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	1f 92       	push	r1
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	19 82       	std	Y+1, r1	; 0x01
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	be 01       	movw	r22, r28
 168:	6f 5f       	subi	r22, 0xFF	; 255
 16a:	7f 4f       	sbci	r23, 0xFF	; 255
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 5b 00 	call	0xb6	; 0xb6 <NRF_ReadReg>
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	82 60       	ori	r24, 0x02	; 2
 176:	89 83       	std	Y+1, r24	; 0x01
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	be 01       	movw	r22, r28
 17c:	6f 5f       	subi	r22, 0xFF	; 255
 17e:	7f 4f       	sbci	r23, 0xFF	; 255
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 78 00 	call	0xf0	; 0xf0 <NRF_WriteReg>
 186:	83 ef       	ldi	r24, 0xF3	; 243
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <NRF_PowerOn+0x32>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <NRF_PowerOn+0x38>
 190:	00 00       	nop
 192:	0f 90       	pop	r0
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <NRF_TransmitMode>:
void NRF_TransmitMode(){
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	1f 92       	push	r1
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t value=0;
 1a4:	19 82       	std	Y+1, r1	; 0x01
	NRF_ReadReg(CONFIG,&value,1);
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	be 01       	movw	r22, r28
 1aa:	6f 5f       	subi	r22, 0xFF	; 255
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 5b 00 	call	0xb6	; 0xb6 <NRF_ReadReg>
	value&=~(1<<PRIM_RX);
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	89 83       	std	Y+1, r24	; 0x01
	NRF_WriteReg(CONFIG,&value,1);
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	be 01       	movw	r22, r28
 1be:	6f 5f       	subi	r22, 0xFF	; 255
 1c0:	7f 4f       	sbci	r23, 0xFF	; 255
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 78 00 	call	0xf0	; 0xf0 <NRF_WriteReg>
	cleBit(PORTB,CE);
 1c8:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	8d e2       	ldi	r24, 0x2D	; 45
 1cc:	8a 95       	dec	r24
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <NRF_TransmitMode+0x32>
	_delay_us(135);
}
 1d0:	0f 90       	pop	r0
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <NRF_WritePLD>:
void NRF_WritePLD(uint8_t *buf,uint8_t size){
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	8c 01       	movw	r16, r24
 1e4:	f6 2e       	mov	r15, r22
	cleBit(PORTB,CSN);
 1e6:	c4 98       	cbi	0x18, 4	; 24
	SPI_ReadWriteByte(W_TX_PAYLOAD);
 1e8:	80 ea       	ldi	r24, 0xA0	; 160
 1ea:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <SPI_ReadWriteByte>
	for(int i=0; i<size;i++){
 1ee:	ff 20       	and	r15, r15
 1f0:	49 f0       	breq	.+18     	; 0x204 <NRF_WritePLD+0x2c>
 1f2:	e8 01       	movw	r28, r16
 1f4:	0f 0d       	add	r16, r15
 1f6:	11 1d       	adc	r17, r1
		SPI_ReadWriteByte(buf[i]);
 1f8:	89 91       	ld	r24, Y+
 1fa:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <SPI_ReadWriteByte>
	_delay_us(135);
}
void NRF_WritePLD(uint8_t *buf,uint8_t size){
	cleBit(PORTB,CSN);
	SPI_ReadWriteByte(W_TX_PAYLOAD);
	for(int i=0; i<size;i++){
 1fe:	c0 17       	cp	r28, r16
 200:	d1 07       	cpc	r29, r17
 202:	d1 f7       	brne	.-12     	; 0x1f8 <NRF_WritePLD+0x20>
		SPI_ReadWriteByte(buf[i]);
	}
	setBit(PORTB,CSN);
 204:	c4 9a       	sbi	0x18, 4	; 24
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	08 95       	ret

00000212 <NRF_WriteData>:
void NRF_WriteData(){
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	1f 92       	push	r1
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
	uint8_t status=0;
 21c:	19 82       	std	Y+1, r1	; 0x01
	setBit(PORTB,CE);
 21e:	c3 9a       	sbi	0x18, 3	; 24
 220:	85 e0       	ldi	r24, 0x05	; 5
 222:	8a 95       	dec	r24
 224:	f1 f7       	brne	.-4      	; 0x222 <NRF_WriteData+0x10>
	_delay_us(15);
	NRF_ReadReg(STATUS,&status,1);
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	be 01       	movw	r22, r28
 22a:	6f 5f       	subi	r22, 0xFF	; 255
 22c:	7f 4f       	sbci	r23, 0xFF	; 255
 22e:	87 e0       	ldi	r24, 0x07	; 7
 230:	0e 94 5b 00 	call	0xb6	; 0xb6 <NRF_ReadReg>
	while(!(status&(1<<5)))
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	85 fd       	sbrc	r24, 5
 238:	0a c0       	rjmp	.+20     	; 0x24e <NRF_WriteData+0x3c>
	{
		NRF_ReadReg(STATUS,&status,1);
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	be 01       	movw	r22, r28
 23e:	6f 5f       	subi	r22, 0xFF	; 255
 240:	7f 4f       	sbci	r23, 0xFF	; 255
 242:	87 e0       	ldi	r24, 0x07	; 7
 244:	0e 94 5b 00 	call	0xb6	; 0xb6 <NRF_ReadReg>
void NRF_WriteData(){
	uint8_t status=0;
	setBit(PORTB,CE);
	_delay_us(15);
	NRF_ReadReg(STATUS,&status,1);
	while(!(status&(1<<5)))
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	85 ff       	sbrs	r24, 5
 24c:	f6 cf       	rjmp	.-20     	; 0x23a <NRF_WriteData+0x28>
	{
		NRF_ReadReg(STATUS,&status,1);
	}
	NRF_WriteReg(STATUS,&status,1);
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	be 01       	movw	r22, r28
 252:	6f 5f       	subi	r22, 0xFF	; 255
 254:	7f 4f       	sbci	r23, 0xFF	; 255
 256:	87 e0       	ldi	r24, 0x07	; 7
 258:	0e 94 78 00 	call	0xf0	; 0xf0 <NRF_WriteReg>
	cleBit(PORTB,CE);
 25c:	c3 98       	cbi	0x18, 3	; 24
}
 25e:	0f 90       	pop	r0
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <NRF_OpenPipe>:
void NRF_OpenPipe(uint8_t pipe,uint8_t width){
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	1f 92       	push	r1
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
	uint8_t size=width;
 270:	69 83       	std	Y+1, r22	; 0x01
	NRF_WriteReg(RX_PW_P0+pipe,&size,1);
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	be 01       	movw	r22, r28
 276:	6f 5f       	subi	r22, 0xFF	; 255
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	8f 5e       	subi	r24, 0xEF	; 239
 27c:	0e 94 78 00 	call	0xf0	; 0xf0 <NRF_WriteReg>
 280:	0f 90       	pop	r0
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <SPI_Init>:
	
}
uint8_t SPI_ReadByte(void){
	while(!(SPSR&(1<<SPIF))){}
		return SPDR;
}
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	a9 01       	movw	r20, r18
 28e:	02 c0       	rjmp	.+4      	; 0x294 <SPI_Init+0xc>
 290:	44 0f       	add	r20, r20
 292:	55 1f       	adc	r21, r21
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <SPI_Init+0x8>
 298:	94 2f       	mov	r25, r20
 29a:	90 6a       	ori	r25, 0xA0	; 160
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <SPI_Init+0x1a>
 29e:	22 0f       	add	r18, r18
 2a0:	33 1f       	adc	r19, r19
 2a2:	8a 95       	dec	r24
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <SPI_Init+0x16>
 2a6:	29 2b       	or	r18, r25
 2a8:	27 bb       	out	0x17, r18	; 23
 2aa:	88 b3       	in	r24, 0x18	; 24
 2ac:	48 2b       	or	r20, r24
 2ae:	48 bb       	out	0x18, r20	; 24
 2b0:	83 e5       	ldi	r24, 0x53	; 83
 2b2:	8d b9       	out	0x0d, r24	; 13
 2b4:	08 95       	ret

000002b6 <SPI_ReadWriteByte>:
uint8_t SPI_ReadWriteByte(uint8_t data){
	//uint8_t empty=0;
	SPDR=data;
 2b6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF))){}
 2b8:	77 9b       	sbis	0x0e, 7	; 14
 2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <SPI_ReadWriteByte+0x2>
	return SPDR;	
 2bc:	8f b1       	in	r24, 0x0f	; 15
 2be:	08 95       	ret

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
