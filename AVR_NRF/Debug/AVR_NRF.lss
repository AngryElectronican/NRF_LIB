
AVR_NRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000019a  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000927  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000779  00000000  00000000  00000c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f9  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001794  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000384  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002dd  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001edd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "NRF.h"



int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	uint8_t transmitAddress[5]={0xFF,0xFF,0xFF,0xFF,0xFF};
  96:	85 e0       	ldi	r24, 0x05	; 5
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
	uint8_t returnedAddress[5]={0,0,0,0,0};
  a8:	8e 01       	movw	r16, r28
  aa:	0a 5f       	subi	r16, 0xFA	; 250
  ac:	1f 4f       	sbci	r17, 0xFF	; 255
  ae:	85 e0       	ldi	r24, 0x05	; 5
  b0:	f8 01       	movw	r30, r16
  b2:	11 92       	st	Z+, r1
  b4:	8a 95       	dec	r24
  b6:	e9 f7       	brne	.-6      	; 0xb2 <main+0x30>
	//uint8_t data=0;
	DDRA=0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a bb       	out	0x1a, r24	; 26
	SPI_Init(CN,CSN);
  bc:	64 e0       	ldi	r22, 0x04	; 4
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 af 00 	call	0x15e	; 0x15e <SPI_Init>
	writeRegNRF(0x10,transmitAddress,5);
  c4:	45 e0       	ldi	r20, 0x05	; 5
  c6:	be 01       	movw	r22, r28
  c8:	6f 5f       	subi	r22, 0xFF	; 255
  ca:	7f 4f       	sbci	r23, 0xFF	; 255
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	0e 94 8e 00 	call	0x11c	; 0x11c <writeRegNRF>
	readRegNRF(0x10,returnedAddress,5);
  d2:	45 e0       	ldi	r20, 0x05	; 5
  d4:	b8 01       	movw	r22, r16
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	0e 94 71 00 	call	0xe2	; 0xe2 <readRegNRF>
	PORTA=returnedAddress[0];
  dc:	8e 81       	ldd	r24, Y+6	; 0x06
  de:	8b bb       	out	0x1b, r24	; 27
	
    while (1) 
    {
		
    }
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <main+0x5e>

000000e2 <readRegNRF>:
 *  Author: ANGRY_ELECTRONICAN
 */ 
#include "NRF.h"
#include "spi.h"

void readRegNRF(uint8_t addr,uint8_t *buffer,uint8_t size){
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	8b 01       	movw	r16, r22
  ee:	f4 2e       	mov	r15, r20
	cleBit(PORTB,PB4);
  f0:	c4 98       	cbi	0x18, 4	; 24
	SPI_ReadWriteByte(addr);
  f2:	0e 94 c6 00 	call	0x18c	; 0x18c <SPI_ReadWriteByte>
	for(int i=0;i<size;i++){
  f6:	ff 20       	and	r15, r15
  f8:	51 f0       	breq	.+20     	; 0x10e <readRegNRF+0x2c>
  fa:	e8 01       	movw	r28, r16
  fc:	0f 0d       	add	r16, r15
  fe:	11 1d       	adc	r17, r1
	buffer[i]=SPI_ReadWriteByte(0xFF);
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	0e 94 c6 00 	call	0x18c	; 0x18c <SPI_ReadWriteByte>
 106:	89 93       	st	Y+, r24
#include "spi.h"

void readRegNRF(uint8_t addr,uint8_t *buffer,uint8_t size){
	cleBit(PORTB,PB4);
	SPI_ReadWriteByte(addr);
	for(int i=0;i<size;i++){
 108:	c0 17       	cp	r28, r16
 10a:	d1 07       	cpc	r29, r17
 10c:	c9 f7       	brne	.-14     	; 0x100 <readRegNRF+0x1e>
	buffer[i]=SPI_ReadWriteByte(0xFF);
	}
	setBit(PORTB,PB4);
 10e:	c4 9a       	sbi	0x18, 4	; 24
}
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	ff 90       	pop	r15
 11a:	08 95       	ret

0000011c <writeRegNRF>:
uint8_t writeRegNRF(uint8_t addr,uint8_t *value,uint8_t num){
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	8b 01       	movw	r16, r22
 12a:	f4 2e       	mov	r15, r20
	uint8_t receive=0;
	cleBit(PORTB,PB4);
 12c:	c4 98       	cbi	0x18, 4	; 24
	receive=SPI_ReadWriteByte(addr|0x20);
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	0e 94 c6 00 	call	0x18c	; 0x18c <SPI_ReadWriteByte>
 134:	e8 2e       	mov	r14, r24
	for(int i=0;i<num;i++){
 136:	ff 20       	and	r15, r15
 138:	49 f0       	breq	.+18     	; 0x14c <writeRegNRF+0x30>
 13a:	e8 01       	movw	r28, r16
 13c:	0f 0d       	add	r16, r15
 13e:	11 1d       	adc	r17, r1
		SPI_ReadWriteByte(value[i]);
 140:	89 91       	ld	r24, Y+
 142:	0e 94 c6 00 	call	0x18c	; 0x18c <SPI_ReadWriteByte>
}
uint8_t writeRegNRF(uint8_t addr,uint8_t *value,uint8_t num){
	uint8_t receive=0;
	cleBit(PORTB,PB4);
	receive=SPI_ReadWriteByte(addr|0x20);
	for(int i=0;i<num;i++){
 146:	c0 17       	cp	r28, r16
 148:	d1 07       	cpc	r29, r17
 14a:	d1 f7       	brne	.-12     	; 0x140 <writeRegNRF+0x24>
		SPI_ReadWriteByte(value[i]);
	}
	setBit(PORTB,PB4);
 14c:	c4 9a       	sbi	0x18, 4	; 24
	return receive;	
 14e:	8e 2d       	mov	r24, r14
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	ff 90       	pop	r15
 15a:	ef 90       	pop	r14
 15c:	08 95       	ret

0000015e <SPI_Init>:
	
}
uint8_t SPI_ReadByte(void){
	while(!(SPSR&(1<<SPIF))){}
		return SPDR;
}
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	a9 01       	movw	r20, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <SPI_Init+0xc>
 166:	44 0f       	add	r20, r20
 168:	55 1f       	adc	r21, r21
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <SPI_Init+0x8>
 16e:	94 2f       	mov	r25, r20
 170:	90 6a       	ori	r25, 0xA0	; 160
 172:	02 c0       	rjmp	.+4      	; 0x178 <SPI_Init+0x1a>
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <SPI_Init+0x16>
 17c:	29 2b       	or	r18, r25
 17e:	27 bb       	out	0x17, r18	; 23
 180:	88 b3       	in	r24, 0x18	; 24
 182:	48 2b       	or	r20, r24
 184:	48 bb       	out	0x18, r20	; 24
 186:	83 e5       	ldi	r24, 0x53	; 83
 188:	8d b9       	out	0x0d, r24	; 13
 18a:	08 95       	ret

0000018c <SPI_ReadWriteByte>:
uint8_t SPI_ReadWriteByte(uint8_t data){
	//uint8_t empty=0;
	SPDR=data;
 18c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF))){}
 18e:	77 9b       	sbis	0x0e, 7	; 14
 190:	fe cf       	rjmp	.-4      	; 0x18e <SPI_ReadWriteByte+0x2>
	return SPDR;	
 192:	8f b1       	in	r24, 0x0f	; 15
 194:	08 95       	ret

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
