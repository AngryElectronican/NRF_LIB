
AVR_NRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000718  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000650  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002df  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031a  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005f  00000000  00000000  000015a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001601  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define CSN	PB4

int main(void)
{
	uint8_t data=0;
	DDRA=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	SPI_Init(CN,CSN);
  70:	64 e0       	ldi	r22, 0x04	; 4
  72:	83 e0       	ldi	r24, 0x03	; 3
  74:	0e 94 46 00 	call	0x8c	; 0x8c <SPI_Init>
	cleBit(PORTB,CSN);
  78:	c4 98       	cbi	0x18, 4	; 24
	data=SPI_ReadWriteByte(0x00);
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	0e 94 5d 00 	call	0xba	; 0xba <SPI_ReadWriteByte>
	data=SPI_ReadWriteByte(0xFF);
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	0e 94 5d 00 	call	0xba	; 0xba <SPI_ReadWriteByte>
	setBit(PORTB,CSN);
  86:	c4 9a       	sbi	0x18, 4	; 24
	PORTA=data;
  88:	8b bb       	out	0x1b, r24	; 27
	
    while (1) 
    {
		
    }
  8a:	ff cf       	rjmp	.-2      	; 0x8a <main+0x1e>

0000008c <SPI_Init>:
	
}
uint8_t SPI_ReadByte(void){
	while(!(SPSR&(1<<SPIF))){}
		return SPDR;
}
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	a9 01       	movw	r20, r18
  92:	02 c0       	rjmp	.+4      	; 0x98 <SPI_Init+0xc>
  94:	44 0f       	add	r20, r20
  96:	55 1f       	adc	r21, r21
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <SPI_Init+0x8>
  9c:	94 2f       	mov	r25, r20
  9e:	90 6a       	ori	r25, 0xA0	; 160
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <SPI_Init+0x1a>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	8a 95       	dec	r24
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <SPI_Init+0x16>
  aa:	29 2b       	or	r18, r25
  ac:	27 bb       	out	0x17, r18	; 23
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	48 2b       	or	r20, r24
  b2:	48 bb       	out	0x18, r20	; 24
  b4:	83 e5       	ldi	r24, 0x53	; 83
  b6:	8d b9       	out	0x0d, r24	; 13
  b8:	08 95       	ret

000000ba <SPI_ReadWriteByte>:
uint8_t SPI_ReadWriteByte(uint8_t data){
	//uint8_t empty=0;
	SPDR=data;
  ba:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF))){}
  bc:	77 9b       	sbis	0x0e, 7	; 14
  be:	fe cf       	rjmp	.-4      	; 0xbc <SPI_ReadWriteByte+0x2>
	return SPDR;	
  c0:	8f b1       	in	r24, 0x0f	; 15
  c2:	08 95       	ret

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
